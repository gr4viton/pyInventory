#import _tkinterinter as tkinter
#from _tkinterinter import *

try:
    import tkinter as tk
    from tkinter import *
except ImportError:
    raise ImportError ("The tkinter Module is required to run this program.")

from apihelper import info
from gr4module import *
from xmlPars import REPLACE_xml_singalNames
from xmlPars import GET_xml_singalNames

import linecache # for config loading

import sys # for save

#import _tkinternter as tkinter
import time
import string # for alphabet
import re # for text-number splitting



config_sufix = "_pinmux.vim"

frame = tk.Frame
class ExampleApp(frame):
    ''' App for faster [User signal name] definig for pinmux settings in Processor Expert related sw 
    it writes into xml file [pinmux.peb] directly, 
    through its convenient, easy to use and quick to insert enviroment the rewriting from schematic datasheets is a bliss
    created by [gr4viton] on 2014_10
    '''
    rec_i = 0
    recs = ['world', 'suckers', 'pals', 'mutants', 'meatbags', 'zombies']
    
    def __init__(q, master):
        defFont = ("Console", 8)
        defFont_small = ("Console", 7)
        q.sch = "/" # SplitCharacter
        q.txPTsCounter = 0 # txPTs focus iterator
        
        q.settings_fname = "settings.ini"
        q.LOAD_settings()

        # Initialize window using the parent's constructor
        frame = tk.Frame.__init__(q,
                          master,
                          width=300,
                          height=200)

        # Set the title
        q.master.title('UserSignalName insertion tool = USNIT')
 
        # This allows the size specification to take effect
        q.pack_propagate(0)
 
        # We'll use the flexible pack layout manager
        q.pack()

        # The greeting selector
        # Use a StringVar to access the selector's value
        q.greeting_var = tk.StringVar()
        q.greeting = tk.OptionMenu(q,
                                      q.greeting_var,
                                      'hello',
                                      'goodbye',
                                      'heyo')
        q.greeting_var.set('hello')
 
        # The recipient text entry control and its StringVar
        q.rec_var = tk.StringVar()
        q.rec = tk.Entry(q,
                                  textvariable=q.rec_var)
        q.rec_var.set('world')
 
        # The go button
        q.go_button = tk.Button(q,
                                   text='Go',
                                   command=q.print_out)
 
        
        #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        #:: frJump
        #____________________________________________________frames
        q.frJump = tk.LabelFrame(q, text="Jumper pins batch appender")
        #____________________________________________________buttons
        # populate
        q.btnPopulatePTs = tk.Button(q.frJump, 
                                    text='Populate ports from Jumpers', 
                                    command=q.POPULATE_PTs_andActualize)#,
                                    #e
                                    #underline=7) 
        #btn JUMP_regenerate
        q.btnJumpRegen = tk.Button(q.frJump,
                                   text='Regenerate all',
                                   command=q.JUMP_regenerate,
                                   underline=0)
        #btn pinRegenreate
        q.btnJumpPinActu = tk.Button(q.frJump,
                                   text='Actualize pins',
                                   command=q.JUMP_ACT_pinLabels,
                                   underline=0)

        #____________________________________________________labels
        # label JX_[1:Y]
        q.lbJX = tk.Label(q.frJump, justify=RIGHT, anchor=N+E, text='JX_[1:Y]=')   #Label(q, text='JX_[1:Y]=')
        #lbJXY
        q.lbJXY_val = tk.StringVar()
        q.lbJXY = tk.Label(q.frJump, textvariable=q.lbJXY_val, 
                justify=RIGHT, anchor=N+E, font=defFont)
        q.lbJXY_val.set('')
        #____________________________________________________entries
        # txt JX
        q.curX = 1
        q.eJX_val = tk.StringVar()
        q.eJX = tk.Entry(q.frJump, width=4, textvariable=q.eJX_val)
        q.eJX_val.set(str(q.curX))
        # txt JY
        q.maxY = 20
        q.eJY_val = tk.StringVar()
        q.eJY = tk.Entry(q.frJump, width=4, textvariable=q.eJY_val)
        q.eJY_val.set(str(q.maxY))

        #____________________________________________________texts
        #txJXY
        q.txJXY = tk.Text(q.frJump)
        q.txJXY.config(font=defFont, width=10)
        q.txJXY.delete(1.0, END)
        q.txJXY.insert(INSERT, "\n" * (q.maxY-1) )
        #____________________________________________________ GRID inside frame
        # JX_generator        


        q.lbJX.grid     (row=1, column=0, sticky=W)
        q.eJX.grid      (row=1, column=1, sticky=W)
        q.eJY.grid      (row=1, column=2, sticky=W)

        q.btnJumpPinActu.grid (row=2, column=0, sticky=N+W+E, columnspan=1)
        q.btnJumpRegen.grid   (row=2, column=1, sticky=N+W+E, columnspan=2)

        q.lbJXY.grid(row=3, column=0, columnspan=1, rowspan=1, sticky=N+W+E)
        q.txJXY.grid(row=3, column=1, columnspan=3, rowspan=1, sticky=N+W+E, pady=1)
        
        q.btnPopulatePTs.grid(row=0, column=0, columnspan=4, sticky=N+W+E+S)         

        #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        #:: frAddList
        #____________________________________________________frames
        q.frAddList = tk.LabelFrame(q, text="Add by list")
        #____________________________________________________texts
        # txInsertMore
        q.txInsertMore = tk.Text(q.frAddList)
        q.txInsertMore.config(font=defFont, height=10, width = 20 )
        # txAddOther - adds ADC/DAC etc new signalnames
        q.txAddOther = tk.Text(q.frAddList)
        q.txAddOther.config(font=defFont, height=10, width = 20 )

        #____________________________________________________buttons
        # btnInsertMore
        q.btnInsertMore = tk.Button(q.frAddList, 
                                            text='Add more', 
                                            command=q.ADD_more,
                                            underline=6)

        q.btnGetActiveAddMoreString = tk.Button(q.frAddList, 
                                            text='Get active', 
                                            command=q.GET_addMore_from_PTs,
                                            underline=6)

        # btnAddOther
        q.btnAddOther = tk.Button(q.frAddList, 
                                            text='Add other', 
                                            command=q.ACTUALIZE_OSN)
        
        #____________________________________________________ GRID inside frame
        q.txInsertMore.grid (row=0, column=0, columnspan=1, rowspan=2, sticky=S+N+W+E, pady=1)
        q.btnInsertMore.grid(row=0, column=1, columnspan=1, rowspan=1, sticky=S+N+W+E, pady=1)
        q.btnGetActiveAddMoreString.grid(row=1, column=1, columnspan=1, rowspan=1, sticky=S+N+W+E, pady=1)
         
        q.txAddOther.grid (row=0, column=2, columnspan=1, rowspan=2, sticky=S+N+W+E, pady=1)
        q.btnAddOther.grid(row=0, column=3, columnspan=1, rowspan=2, sticky=S+N+W+E, pady=1)
        
        #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        #:: frLoad
        q.frLoad        = tk.LabelFrame(q,         text="Load and save config or peb file")
        q.frLoad2act    = tk.LabelFrame(q.frLoad,  text="Load as current config")
        q.frSaveAct     = tk.LabelFrame(q.frLoad,  text="Save current config")
        #____________________________________________________buttons
        q.btnSaveToPinmux = tk.Button(q.frSaveAct, 
                                            text='into pinmux.peb', 
                                            command=q.SAVE_toPinmux,
                                            underline=0)
        q.btnLoadFromPinmux = tk.Button(q.frLoad2act, 
                                            text='from pinmux.peb', 
                                            command=q.LOAD_fromPinmux,
                                            underline=0)
        

        q.btnLoadConfig = tk.Button(q.frLoad2act, 
                                            text='from config.vim', 
                                            command=q.LOAD_config,
                                            underline=0)
        q.btnSaveConfig = tk.Button(q.frSaveAct, 
                                            text='into config.vim', 
                                            command=q.SAVE_config,
                                            underline=0)

        q.btnSetPath = tk.Button(q.frLoad, 
                                            text='Set path', 
                                            command=q.PATH_set,
                                            underline=0)
        #____________________________________________________texts
        # txPath
        q.txPath = tk.Text(q.frLoad)

        q.txPath.config(font=defFont, height=1, width = 80)
        q.txPath.insert(INSERT, q.pinmuxFname )
        #____________________________________________________labels
        q.lbPath_val = tk.StringVar()
        q.lbPath = tk.Label(q.frLoad, textvariable = q.lbPath_val,
                justify=RIGHT, anchor=N, font=defFont, background="light green")
        q.lbPath_val.set('---')

        #____________________________________________________GRID inside frame
        cE = 10
        q.txPath.grid     (row=0, column=0, columnspan=cE, sticky=N+W+E+S) 
        q.btnSetPath.grid       (row=0, column=cE,columnspan=1, rowspan=2, sticky=N+W+E+S) 
        q.lbPath.grid           (row=1, column=0, columnspan=cE, sticky=N+W+E+S) 

        q.frSaveAct.grid        (row=2, column=0, columnspan=1, sticky=W) 
        q.frLoad2act.grid       (row=2, column=1, columnspan=1, sticky=W)  

        #____________________________________________________GRID inside frame frLoad2act
        q.btnLoadFromPinmux.grid(row=0, column=0, columnspan=1, sticky=N+W+E+S) 
        q.btnLoadConfig.grid    (row=1, column=0, columnspan=1, sticky=N+W+E+S) 
        #____________________________________________________GRID inside frame frSaveAct
        q.btnSaveToPinmux.grid  (row=0, column=0, columnspan=1, sticky=N+W+E+S) 
        q.btnSaveConfig.grid    (row=1, column=0, columnspan=1, sticky=N+W+E+S) 

        #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        #:: frPTs
        #____________________________________________________frames
        q.frPTs = tk.LabelFrame(q, text="Individual GPIO Ports - do not edit directly (changes won't take effect) - ALT+A for actualizoation of viewed fields (reverts mistakenly directly inputed changes)")
        #____________________________________________________texts
        # txPTs
        numOfPorts = 5
        portLetters = list(string.ascii_uppercase)[:numOfPorts]

        q.numOfPorts = numOfPorts
        q.portLetters = portLetters
        q.txPTs = [tk.Text(q.frPTs) for i in range(numOfPorts)]
        
        txPTs_width = 32
        txPTs_height = 32
        [item.config(font=defFont,width=txPTs_width,height=txPTs_height,wrap=NONE) for item in q.txPTs]

        #txPT dictionary
        q.txPT = {key:value for key, value in zip( portLetters, q.txPTs ) }

        #____________________________________________________labels
        #lbPTs
        q.lbPTs = [tk.Label(q.frPTs) for i in range(numOfPorts)]
        [item.config(text=labelText) for item, labelText in zip(q.lbPTs, portLetters)]

        #lbPins
        q.lbPins = [tk.Label(q.frPTs) for i in range(numOfPorts)]
        maxPinNumber = 32
        q.maxPinNumber = maxPinNumber 
        labelText = "\n".join(str(s) for s in range(maxPinNumber))
        [item.config(text=labelText,font=defFont,width=2) for item in q.lbPins]
        
        
        #____________________________________________________ GRID inside frame
        col_s = 0 # start column
        [lb.grid(row=3,column=n_col*2,columnspan=2,sticky=W+S+E) 
                                        for lb,n_col in zip(q.lbPTs, range(col_s,col_s+numOfPorts))]
        [lb.grid(row=4,column=n_col*2,sticky=N+E) 
                                        for lb,n_col in zip(q.lbPins, range(col_s,col_s+numOfPorts))]
        [tx.grid(row=4,column=n_col*2+1, sticky=N+W+E, pady=1 ) 
                                        for tx,n_col in zip(q.txPTs, range(col_s,col_s+numOfPorts))]
        
        #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        #:: frSign
        #____________________________________________________frames
        q.frSign = tk.LabelFrame(q, text="Edit selected pin signal names")
        #____________________________________________________buttons
        #btnInsert
        q.btnInsert = tk.Button(q.frSign,     text='Rewrite whole', 
                                            command = q.INSERT_sigNameAndActualize)
                                            #underline=7)
        #btnAdd
        q.btnAdd = tk.Button(q.frSign,        text='Add signal name', 
                                            command = q.ADD_sigNameAndActualize)
                                            #underline=3)
        #btnActualize
        q.btnActualize = tk.Button(q.frSign,  text='View actualization', 
                                            command = q.ACTUALIZE_view,
                                            underline=0)
        #____________________________________________________texts
        # txSelPin
        q.txSelPin = tk.Text(q.frSign)
        q.txSelPin.config(font=defFont, height=1, width = 4)
        q.txSelPin.insert(INSERT, "a0" )
        # txSigName
        q.txSigName = tk.Text(q.frSign)
        q.txSigName.config(font=defFont, height=1, width = 30)
        q.txSigName.insert(INSERT, "" )
        # txWholeValue
        q.txWholeValue = tk.Text(q.frSign)
        q.txWholeValue.config(font=defFont, height=1, width = 30)
        q.txWholeValue.insert(INSERT, "" )
        #____________________________________________________labels
        Label(q.frSign, text='Selected GPIO pin:').grid(row=0, column=1, sticky=W+S+E+N)
        #Label(q.frSign, text='new SigName:').grid(row=0,column=2,sticky=W+S+E+N)
        #Label(q.frSign, text='Pin signals:').grid(row=1,column=2,sticky=W+S+E+N)

        #____________________________________________________ GRID inside frame
        q.txSelPin.grid(row=0, column=2)

        q.btnAdd.grid       (row=1, column=1, sticky=W+S+E+N)
        q.txSigName.grid    (row=1, column=2, columnspan=1, sticky=W+S+E+N)

        q.btnInsert.grid    (row=2, column=1, sticky=W+S+E+N)
        q.txWholeValue.grid (row=2, column=2, columnspan=1, sticky=W+S+E+N)

        q.btnActualize.grid (row=3, column=0, columnspan=4, sticky=W+S+E+N)

        #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        # GRID FRAMES
        #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        #:: frames
        
        q.frAddList.grid(row=1, column=2, rowspan=2, columnspan=2, sticky=W+S+E+N )
        q.frSign.grid   (row=1, column=0, rowspan=1, columnspan=1, sticky=W+S+E+N )
        q.frLoad.grid   (row=1, column=1, rowspan=1, columnspan=1, sticky=W+S+E+N )

        q.frPTs.grid    (row=3, column=0, rowspan=1, columnspan=3, sticky=W+S+E+N )
        q.frJump.grid   (row=3, column=3, rowspan=1, columnspan=1, sticky=W+S+E+N )
        #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


        #print("\n".join(str(i) for i in q.lbPTs))
        #print(q.lbPTs)

        # %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        # creation of list for storing data
        # %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        #class pinX: pass
        #pinX.value
        numOfPins = 32
        str_void = '#void#'
        q.str_void = str_void 
        q.numOfPins = numOfPins
#        pta = { pin:val for pin,val in zip(range(numOfPins), ['#void#']*numOfPins) }
        #dictP = [{ pin:val for pin,val in zip(range(q.numOfPins), ['#void#']*q.numOfPins) }] * q.numOfPorts
        dictP = [ [str_void]*q.numOfPins for i in range(q.numOfPorts) ]
        # for port pin signalNames
        q.PTs = { char:list for char,list in zip(q.portLetters, dictP) }
#        print(q.PTs)
        # for other signalNames (ADC,DAC..)
        q.OSN = {}

        #q.PT = { port:pins for port,pins in zip( [portLetters]*pinNumbers, range(pinNumbers )}

        
        # %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        # bindings
        # %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        modifs = '!'
        # button shortcuts
        q.BIND_keyFcn(master, q.JUMP_regenerate, modifs, 'gq')
        q.BIND_keyFcn(master, q.POPULATE_PTs_andActualize, modifs, 'p')
        q.BIND_keyFcn(master, q.ADD_sigNameAndActualize, modifs, 'air')
        q.BIND_keyFcn(master, q.ACTUALIZE_view, modifs, 'v')
        q.BIND_keyFcn(master, q.SAVE_toPinmux, modifs, 's')
        
        # add path
        q.BIND_keyFcn(master, q.PATH_setOnly, modifs, 'e')
        
        # exit
        q.BIND_keyFcn(master, q.EXIT_program, modifs, 'q')
#        master.bind("<Shift-Escape>", q.EXIT_program) 

        # focus shortcuts
        # not working
        q.BIND_keyFcn(master, q.eJX.focus_set(), '!', 'z')
   #     q.BIND_keyFcn(master, q.focus_set(q.eJX), '!', 'z')
#        q.BIND_keyFcn(master, q.eJY.focus_set, '!', 'x')
        
        # ____________________________________________________
        # disable some keys
        items = q.txPTs + [q.txSigName,q.txSelPin,q.txJXY]
        keys = ['<Return>', '<Tab>', '<space>']
        #[item.bind(key, q.KEY_disable(item)) for item in items ]
        [item.bind(key, q.KEY_disable(item)) for item in items for key in keys]


        q.txSigName.bind('<Return>', q.KEY_disable(q.txSigName))
        q.txSelPin.bind('<Return>', q.KEY_disable(q.txSelPin))
        q.txJXY.bind('<Return>', q.KEY_disable(q.txJXY))
        
        # ____________________________________________________
        q.txPath.bind('<Return>', q.PATH_setOnly(q.txPath))
        
        # %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        # view
        q.ACTUALIZE_view()
    def ADD_more(q):
        lines = q.txInsertMore.get(1.0,END).split("\n")
        [ q.ADD_sigNameFrom( *(line.split("=")) ) for line in lines if (line.strip() != "" and line.split("=")[1].strip() != "") ]
 
        q.ACTUALIZE_view()
#        splited.pop()
        
        #print(splited)

    def EXIT_program(q, *whatever):
        q.SAVE_config()
        q.destroy()
        q.exit()
    def LOAD_config(q):
        """active PT settings"""
        q.LOAD_pinmuxFname_fromText()
        
        print("\n".join(["puvodni:","%"*80, str(q.PTs), "%"*80]))
        f = open(q.config_fname,'r')
        lins = f.readlines() 
        f.close() 

        pad = 3
        iline = pad
        
        #for iport in range(0, q.numOfPorts):
        #    iline = pad + iport * q.numOfPins
        #    q.PTs[q.portLetters[iport]] = ["volno"] * q.numOfPins
#       #     q.PTs[q.portLetters[iport]] = [q.str_void] * q.numOfPins
        #    q.PTs[q.portLetters[iport]] = [ lins[ipin] for ipin in range(iline, q.numOfPins -1)][:-1]
        #    print( str(iline) )
        #    print( q.portLetters[iport])
        
        # create void PTs
        for iport in range(0, q.numOfPorts):
            q.PTs[q.portLetters[iport]] = [q.str_void] * q.numOfPins
        
        whole = "".join(lins)
        PP = [ port.split('\n') for port in whole.split("##PORT") ] 
        
        
        #delete first element config name
        PP = PP[1:]

        #delete first element (port letter)
        PP = [ port[1:] for port in PP ]
        # delete [##end] element
        PP[-1] = PP[-1][:-1]

        
        for i in range(0, q.numOfPorts):
            for w in range(0, q.numOfPins):
                # if it is blank or empty -> make it clear
                if PP[i][w].strip() in (""):
                    PP[i][w] = q.str_void #"volno" 
                else:
                    # if the last character is / - delete it
                    if PP[i][w][-1] == "/":
                        PP[i][w] = PP[i][w][:-1]
                    # if the first character is / - delete it
                    if PP[i][w][0] == "/":
                        PP[i][w] = PP[i][w][1:]
                
#        [pin = "volno" for pin in port if pin == ""]
        #pin = ["volno" for pin in port for port in PP if pin == ""]
        print(PP)

        # fill dictionary
        for iport in range(0, q.numOfPorts):
            q.PTs[q.portLetters[iport]] = PP[iport]
        #print(pins)

#        print("\n".join(["nove:","%"*80, str(q.PTs), "%"*80]))
        q.ACTUALIZE_view()

    def SAVE_config(q):
        """active PT settings"""
        q.LOAD_pinmuxFname_fromText()
        lins = [q.pinmuxFname]
        
        strPTs = [txPT.get(1.0,END) for txPT in q.txPTs]
        lins += [("##PORT%s\n%s") % (let, strPT) for (let,strPT) in zip(q.portLetters,strPTs)]
        lins += ["##END"]

        f = open(q.config_fname,'w')
        f.writelines(lins) 
        f.close() 
        print(lins)
        q.SAVE_settings()

    def SAVE_settings(q):
        """path and that is all"""
        q.LOAD_pinmuxFname_fromText()

        f = open(q.settings_fname,'w')
        f.writelines(q.pinmuxFname) 
        f.close() 

    def LOAD_settings(q):
        """path and that is all"""
        q.pinmuxFname = linecache.getline(q.settings_fname, 1)
        
    def UPDATE_config_fname(q):
        q.config_fname = q.pinmuxFname[:] + config_sufix

    def LOAD_pinmuxFname_fromSettings(q):
        q.LOAD_settings()
        q.UPDATE_config_fname()
        q.ACTUALIZE_txPath_fromVariables()


    def LOAD_pinmuxFname_fromText(q):
        #q.pinmuxFname = q.txPath.get(1.0,END).strip()
        q.pinmuxFname = q.lbPath_val.get();
        q.UPDATE_config_fname()
        q.ACTUALIZE_txPath_fromVariables()

    def ACTUALIZE_txPath_fromVariables(q):
        q.txPath.delete(1.0, END)
        q.txPath.insert(1.0, q.pinmuxFname)
        q.PATH_set()
        
    def PATH_set(q):
        q.lbPath_val.set( q.txPath.get(1.0,END).strip() )
        print( "Current path is: %s" % q.lbPath_val.get() )

    def PATH_setOnly(q,evt):
        q.PATH_set()
        #return q.KEY_disable(q.txJXY)
        return 'break'

    def ADD_sigNameAndActualize(q, *whatever):
        """ inserts signal name from text [txSigName] into dictionary [PTs]
        as stated in [txSelPin] and populates [txPTs] text fields"""
        q.ADD_sigName()
        q.ACTUALIZE_view()

    def INSERT_sigNameAndActualize(q, *whatever):
        """ inserts signal name from text [txSigName] into dictionary [PTs]
        as stated in [txSelPin] and populates [txPTs] text fields"""
        q.INSERT_sigName()
        q.ACTUALIZE_view()

    def ADD_sigNameFrom(q, strSelPin, strSigName):
        """ adds signal name = [txSigName] into dictionary [PTs]
        as stated in [txSelPin] to its current signal names """
        (suc,port, pin) = q.GET_PTX( strSelPin.strip() )
        q.APPEND_sigNames(port,pin, strSigName.strip().upper() )

    def ADD_sigName(q):
        """ adds signal name = [txSigName] into dictionary [PTs]
        as stated in [txSelPin] to its current signal names """
        (suc,port, pin) = q.GET_PTX( q.txSelPin.get(1.0, END).strip() )
        q.APPEND_sigNames(port,pin, q.txSigName.get(1.0, END).strip() )

    def INSERT_sigName(q):
        """ inserts signal name = [txSigName] into dictionary [PTs]
        as stated in [txSelPin] instead of its previous value"""
        (suc,port, pin) = q.GET_PTX( q.txSelPin.get(1.0, END).strip() )
        q.PTs[port][pin] = q.txWholeValue.get(1.0, END).strip()


    def UPDATE_txWholeValue(q):
        """updates [txSigName] text value according to [PTs] dictionary """
        (suc,port, pin) = q.GET_PTX( q.txSelPin.get(1.0, END).strip() )
        sigName = q.PTs[port][pin]
        # if void??
        q.txWholeValue.delete(1.0, END)
        q.txWholeValue.insert(INSERT, sigName )
        
    def BIND_keyFcn(q, bindObj, fcn, modifs, keys, *whatever):
#        !alt #super ^ctrl +shift
        key_dict = {"!":'Alt', "#":'Super', "^":'Control', "+":'Shift'}
        str_keys = []
        key_names = list("qr")
        str_keys += [ "<%s-%s>" % (key_dict[modif],key_name) for modif in list(modifs) for key_name in list(keys)]
        [bindObj.bind(str_key, fcn) for str_key in str_keys]

    def JUMP_ACT_variables(q):
        q.JX = int(q.eJX_val.get())
        q.maxY = int(q.eJY_val.get())
        
    def JUMP_ACT_pinLabels(q):
        q.JUMP_ACT_variables()
        strJumperPins = ["J%i_%i" % (X,Y) for X,Y in zip( (q.JX,) * (1+q.maxY) , range(1, q.maxY+1 ) )]
        q.lbJXY_val.set( "\n".join( strJumperPins ) )

    def JUMP_ACT_txSize_and_delete(q):
        q.JUMP_ACT_variables()

        q.txJXY.config(height = q.maxY)

        #if maxY != q.maxY: 
            #that means that the height of text has changed
        q.txJXY.delete(1.0, END)
        q.txJXY.insert(INSERT, "\n" * (q.maxY-1) )

    def JUMP_regenerate(q, *whatever):
        ''' Generates JX_[1:Y] list inside txJXY'''
        q.JUMP_ACT_pinLabels()
        q.JUMP_ACT_txSize_and_delete()
               
#        q.txJXY.config(height=q.lbJXY.winfo_height()/15)

        #if JX != q.curJX: 
#        q.curJX = JX
#        q.maxY = maxY
#        print( "%s=%s" % (k,v) for k,v in zip(range(5),range(5)) )
        #print(dir(q.txJXY))
        #q.txJXY.insert(INSERT,"\n".join("J%i_" % X 
        #        for X in range(1, 1+int(q.eJY_val.get()))                
        #        ))
#        print([a for a in range(1, 1+int(q.eJY_val.get()))])
        #print("\n".join("J%i_" % X 
        #        for X in range(1, 1+int(q.eJY_val.get()))                
        #        ))
    def APPEND_sigNames(q,port,pin,sigNames):
        [q.APPEND_sigName(port,pin, sigName ) for sigName in sigNames.split(q.sch)]
    def APPEND_sigName(q,port,pin,sigName):
        sigName = sigName.upper()
        if sigName == q.str_void:
            return
        if q.PTs[port][pin] == q.str_void:
            q.PTs[port][pin] = sigName
            return
        signals = str(q.PTs[port][pin]).split(q.sch)
        ss = set(signals)
        if sigName not in set(signals):
            print(signals)
            signals.append(sigName)
            q.PTs[port][pin] = q.sch.join(signals)

    def GET_PTX(q, str_port):
        ''' translates the port name from user text input
         and returns the object in the list prepared for pinsettings insertion'''

        [(port, pin)] =  re.findall(r'(\w+?)(\d+)', str_port.upper())
        success = 1
        return (success, port, int(pin) )
        # dict with all the possibilities?
        # -> not a good idea
    def POPULATE_PTs_from_txJXY(q):
        J_Y = 0

        for line in q.txJXY.get(1.0, END).splitlines():
            J_Y = J_Y+1
            if line:
                str_J = "J%i_%i" % (q.JX, J_Y)
                (success, port, pin) = q.GET_PTX(line) 
                print("PT%s%i=%s" % (port, pin, str_J))
                if success == 1:
                    q.APPEND_sigNames(port,pin,str_J)
    #            print('path: {}'.format(line))
        
        print(q.PTs)

    def GET_signalNames(q,port,pin):
        if q.PTs[port][pin] != q.str_void:
            return q.PTs[port][pin] 
        else:
            return ""

    def UPDATE_txPTs(q):
        strP = [ "\n".join( 
                [ q.GET_signalNames(port,pin) for pin in range(q.numOfPins) ]
            ) for port in q.portLetters 
            ] 
        [tx.delete(1.0, END) for tx in q.txPTs] 
        #insert contains of strPort
        [ tx.insert(INSERT,strP[port]) for tx, port in zip(q.txPTs, range(q.numOfPorts)) ]

    def CORRECT_syntax(q):
        #...remove / on the beg and end.. capitalize etc..
        pass
    def ACTUALIZE_view(q, *whatever):
        q.CORRECT_syntax()
        q.ACTUALIZE_OSN()

        q.UPDATE_txPTs()
        q.UPDATE_txWholeValue()
        q.ACTUALIZE_txPath_fromVariables()

    def POPULATE_PTs_andActualize(q, *whatever):
        '''not used anymore'''
        
        q.POPULATE_PTs_from_txJXY()

        q.UPDATE_txPTs()
#        [ portq.PT[port]]
        #q.PTs["A"][4] = "J4"
#        print(q.PTs["A"])
        P__()
#        print(q.PTs)
#        strP = [ "\n xXx" for port in range(numOfPorts)] 

        #JX = int(q.eJX_val.get())
        #maxY = 1+int(q.eJY_val.get())
        #q.txJXY.insert(INSERT, 
        #        "\n".join( 
        #            ("J%i_%i" % (X,Y)
        #                for X,Y in zip( (JX,) * maxY , range(1, maxY ) )
        #            )
        #        ))
        #[        
        #    (txPTX.delete(1.0, END),
        #    txPTX.insert(INSERT, "\n" * (-1+len(str_jumpers)) )
        #    ) for txPTX in q.txPT
        #]
        
        q.txPTs[q.txPTsCounter].focus_set()
        q.txPTsCounter += 1
        if q.txPTsCounter >= q.numOfPorts: q.txPTsCounter = 0

    def print_out(q):
        ''' Print a greeting constructed
            from the selections made by
            the user. and changes the next value of recipient string from list of recipients
            '''
        
        print('%s, %s!' % (q.greeting_var.get().title(),
                           q.rec_var.get()))
        
        q.rec_i += 1
        if q.rec_i >= len(q.recs): q.rec_i = 0
        q.rec_var.set(q.recs[q.rec_i])
        
    def run(q):
        ''' Run the app '''
#        q.
        #print(dir(tkinter))
        #info(tkinter)
        #print(tk.TOP())
        #print(tk.BOTTOM)
        q.LOAD_pinmuxFname_fromSettings()
        q.JUMP_regenerate()
        q.POPULATE_PTs_from_txJXY()
        q.mainloop()
    def KEY_disable(q, evt):          
        ''' Makes the key do nothing'''
        #print(evt)
        return 'break' # <--------- this makes normal behaviour disabled
    def KEY_down(q, evt):          
        ''' Makes the key do nothing'''
        #print(evt)
        return 'break' # <--------- this makes normal behaviour disabled
    def ACTUALIZE_OSN(q):
        txt = q.txAddOther.get(1.0, END)
        #txt = """ADC1_DM0 = J500_2/J2_1
#ADC0_SE9 = J500_12"""
        if not txt: 
            return
        list = txt.split("\n")
#        list_item.split("=")
#        print(list)
#        print( [list_item for list_item in list] )
        q.OSN = { pin.strip():sigName.strip() for pin,sigName in 
                [ list_item.split("=") for list_item in list 
                    if list_item.strip() != ""
                    ]  }
        print(q.OSN)

    def SAVE_toPinmux(q):
        """Save file dialog to save dictionary [PTs] into xml file through module [xmlPars.py] """
        q.ACTUALIZE_view()

        str_void = q.str_void
        PTs = q.PTs
        OTHERsigNames = q.OSN

        q.LOAD_pinmuxFname_fromText()
        fname = q.pinmuxFname.strip()
        fname_new = fname

        REPLACE_xml_singalNames(fname, PTs, OTHERsigNames, str_void, fname_new, makebackup=True)
        q.SAVE_settings()

    def LOAD_fromPinmux(q):
        fname = q.pinmuxFname.strip()

        # "u:\Davidek\LOG\LOGBOOK\2014_09_11 - pinMux recreation\_2014_09_11 - peby\renamed signals etc\F-K64F\pinmux_FRDM-K64F_sdk_FINAL.peb" 
        q.LOAD_pinmuxFname_fromText()
        fname = q.pinmuxFname
        parse_text = q.SORT_addMoreString( GET_xml_singalNames(fname,q.PTs) )
        
        q.txInsertMore.delete(1.0, END)
        q.txInsertMore.insert(INSERT, parse_text )
        q.ADD_more()

        #q.POPULATE_PTs_andActualize()

    def GET_addMore_from_PTs(q):
        addMoreText = q.GET_addMoreText_from_PTs()
        q.txInsertMore.delete(1.0, END)
        q.txInsertMore.insert(INSERT, addMoreText )

    def GET_addMoreText_from_PTs(q):
        ls = q.GET_addMoreList_from_PTs();
        return '\n'.join( ls )

    def GET_addMoreList_from_PTs(q):
        ls = []
        for iport in range(0, q.numOfPorts - 1):
            ipin = 0
            for pin_val in q.PTs[q.portLetters[iport]]:
                if pin_val != q.str_void:
#                ls = [ '='.join( [q.portLetters[iport], pin + string(ipin) ] )  ]
                    ls.append( "%c%i=%s" % (q.portLetters[iport], ipin, pin_val ) )
                ipin += 1
                if ipin == 32:
                    return
        return ls
#            addmorestr = '\n'.join(ls)
 #           print(addmorestr)

    def SORT_addMoreString(q,parse_text):
        """string as follows:
        e0=ASDASF/ASDAVZX/ASFD
        A0=ASDAS/ASD/ASDQW
        etc.."""
        if not parse_text:
            return

        data = parse_text.split('\n')

        q.SORT_addMoreList(data)

        parse_text = '\n'.join( data )
        return parse_text

    def SORT_addMoreList(q,data):
        # remove the last if it is "void"
        data = [ d for d in data if d.strip() ]

        #data.sort(key=lambda l: float(l.split('=')[1]),reverse=True)
        #data.sort
        #print(data)
        #print( int([x[1:].split('=')[0]) for x in data] )

        # sort by number of pin
        data = sorted(data, key=lambda x: int(x[1:].split('=')[0]) )
        # sort by port letter
        data = sorted(data, key=lambda x: x[0])
        # add newline after each port
        # . . regex

def key(event):
    print("pressed", repr(event.char))

root = tk.Tk()
app = ExampleApp(root)
#app.bind('<Alt-g>', app.key)
#app.bind('<Alt-g>', key)
app.run()



#time.sleep(2)



# todos:
# save PTs to file
# saving dialog
# backpropagation:
# go through xml file pinmux.peb and find which port pins are availible -> color them in label view - to know

#text field for processing:
# e2=something;e3=something_else [Add]
# also a possibility for prefix to be asigned

#erase button

# iterating through permutations / or only changin first element fifo style in the signal names - by clicking on label

# loading from xml









 #       q.txJXY.delete(1.0, END)
#        q.txInsertMore.insert(INSERT, "" )
